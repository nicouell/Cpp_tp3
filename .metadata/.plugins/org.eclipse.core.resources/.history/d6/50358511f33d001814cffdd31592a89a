/*
 * ClientTesteur.cpp
 *
 *  Created on: 2018-04-11
 *      Author: etudiant
 */

#include <gtest/gtest.h>
#include "Client.h"

using namespace std;
using namespace banque;

TEST(Client, constructeurAvecParametreValide){
	Client t_client(1500, "ouellet", "nicola", "581 246-4094", util::Date(19, 10, 1994));
	ASSERT_EQ(1500, t_client.reqNoFolio());
	ASSERT_EQ("ouellet", t_client.reqNom());
	ASSERT_EQ("nicola", t_client.reqPrenom());
	ASSERT_EQ("581 246-4094", t_client.reqTelephone());
}

TEST(Client, constructeurAvecParametreInvalide){
	ASSERT_THROW(Client t_client(500, "ouellet", "nicola", "581 246-4094", util::Date(19, 10, 1994)), PreconditionException);
	ASSERT_THROW(Client t_client(500, "ouellet", "nic0la", "581 246-4094", util::Date(19, 10, 1994)), PreconditionException);
	ASSERT_THROW(Client t_client(500, "ouel1et", "nicola", "581 246-4094", util::Date(19, 10, 1994)), PreconditionException);
}

class UnClient: public ::testing::Test{
public:
	UnClient():
		t_client(1500, "ouellet", "nicola", "581 246-4094", util::Date(19, 10, 1994)){
	}
	Client t_client;
};

TEST_F(UnClient, reqNoFolio){
	ASSERT_EQ(1500, t_client.reqNoFolio());
}

TEST_F(UnClient, reqNom){
	ASSERT_EQ("ouellet", t_client.reqNom());
}

TEST_F(UnClient, reqPrenom){
	ASSERT_EQ("nicola", t_client.reqPrenom());
}

TEST_F(UnClient, reqTelephone){
	ASSERT_EQ("581 246-4094", t_client.reqTelephone());
}

TEST_F(UnClient, reqDateDeNaissance){
	ASSERT_EQ("Mercredi le 19 octobre 1994", t_client.reqDateDeNaissance().reqDateFormatee());
}

TEST_F(UnClient, asgTelephone){
	t_client.asgTelephone("418 798-8816");
	ASSERT_EQ("418 798-8816", t_client.reqTelephone());
}

TEST_F(UnClient, reqClientFormate){
	ASSERT_EQ("Client no de folio :1500\nnicola ouellet\n581 246-4094\nDate de naissance : Mercredi le 19 octobre 1994\n", t_client.reqClientFormate());
}















